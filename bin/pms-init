#!/usr/bin/env node
const fs = require('fs');
const program = require('commander')
const inquirer = require('inquirer')
const handlebars = require('handlebars')
const chalk = require('chalk')
const ora = require('ora')
const download = require('download-git-repo')
// const tplObj = require(`${__dirname}/../template`)

program
  .usage('<template-name> [project-name]')
program.parse(process.argv)
// 当没有输入参数的时候给个提示
if (program.args.length < 1) return program.help()

let templateName = program.args[0]
let projectName = program.args[1]

// if (!tplObj[templateName]) {
//   console.log(chalk.red('\n Template does not exit! \n '))
//   return
// }
if (!projectName) {
  console.log(chalk.red('\n Project should not be empty! \n '))
  return
}

inquirer
  .prompt([
    {
      name: "project_name",
      type: "input",
      message: "Project name?",
    },
    {
      name: "description",
      type: "input",
      message: "Project description?",
    },
    {
      name: "author",
      type: "input",
      message: "Author?",
    },
  ])
  .then((answer) => {
    // console.log("Hello", answer.project_name, answer.description, answer.author);
    const officialTemplate = 'jiaoyuwu/' + templateName
    console.log(chalk.white('\n Start generating... \n'))
    // 出现加载图标
    const spinner = ora("Downloading...");
    spinner.start();
    // 执行下载方法并传入参数
    console.log(officialTemplate)
    download (
      officialTemplate,
      projectName,
      err => {
        if (err) {
          spinner.fail();
          console.log(chalk.red(`Generation failed. ${err}`))
          return
        }
        // 结束加载图标
        spinner.succeed();
        const fileName = `${projectName}/package.json`;
                        const meta = {
                            name:answer.project_name,
                            description: answer.description,
                            author: answer.author,
                        }
                        if(fs.existsSync(fileName)){
                            const content = fs.readFileSync(fileName).toString();
                            const result = handlebars.compile(content)(meta);
                            fs.writeFileSync(fileName, result);
                        }
        console.log(chalk.green('\n Generation completed!'))
        console.log('\n To get started')
        console.log(`\n    cd ${projectName} \n`)
      }
    )

  });

